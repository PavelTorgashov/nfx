<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NFX.MongoDB</name>
    </assembly>
    <members>
        <member name="T:NFX.DataAccess.MongoDB.Connector.MongoClient">
            <summary>
            The central facade for working with MongoDB. The technology was tested against Mongo DB 3.0.6.
            The NFX MongoDB connector is purposely created for specific needs. It does not support: Mongo security, sharding and replication
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.MongoClient.#ctor(System.String)">
            <summary>
            Creates a new instance of client. 
            For most applications it is sufficient to use the default singleton instance Client.Instance
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.MongoClient.Configure(NFX.Environment.IConfigSectionNode)">
            <summary>
            Sets config root. If this method is never called then configuration is done of the App.CONFIG_MONGO_CLIENT_SECTION section
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.MongoClient.Instance">
            <summary>
            Retrurns the default instance of the Client, lazily crating it on the first access
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.MongoClient.ConfigRoot">
            <summary>
            Returns the config root of the client that was set by the last call to Configure()
            or App.CONFIG_MONGO_CLIENT_SECTION (which may be non-existent)
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.MongoClient.Servers">
            <summary>
            Returns all connected servers
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.MongoClient.Item(NFX.Glue.Node)">
            <summary>
            Returns an existing server node or creates a new one
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.MongoClient.DefaultLocalServer">
            <summary>
            Returns ServerNode for local server on a default port
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Collection">
            <summary>
            Represents MongoDB collections which allows to execute queries and perform CRUD operations
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.FindOne(NFX.DataAccess.MongoDB.Connector.Query,NFX.Serialization.BSON.BSONDocument)">
            <summary>
            Finds a document that satisfied query or null
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.FindAndFetchAll(NFX.DataAccess.MongoDB.Connector.Query,System.Int32,System.Int32,System.Int32,NFX.Serialization.BSON.BSONDocument)">
            <summary>
            Finds all documents that match the supplied query, optionally skipping some.
            Fetches and returns all documents as a list. Be careful not to fetch too many
            </summary>
            <param name="query">Query to match against</param>
            <param name="skipCount">How many documents to skip at the beginning</param>
            <param name="cursorFetchLimit">Impose a limit on total number of fetched docs</param>
            <param name="fetchBy">Size of fetch block</param>
            <param name="selector">Optional field mapping document like: {"field_name": 1}</param>
            <returns>A list of documents (may be empty)</returns>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Find(NFX.DataAccess.MongoDB.Connector.Query,System.Int32,System.Int32,NFX.Serialization.BSON.BSONDocument)">
            <summary>
            Finds all documents that match the supplied query, optionally skipping some.
            Fetches only fetchBy at once, then lazily fetches via cursor
            </summary>
            <param name="query">Query to match against</param>
            <param name="skipCount">How many document sto skip at the beginning</param>
            <param name="fetchBy">The size of fetch block</param>
            <param name="selector">Optional field mapping document like: {"field_name": 1}</param>
            <returns>An iterable cursor</returns>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Insert(NFX.Serialization.BSON.BSONDocument[])">
            <summary>
            Inserts documents on the server. Inspect CRUDResult for write errors and docs affected/matched
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Update(NFX.DataAccess.MongoDB.Connector.UpdateEntry[])">
            <summary>
            Updates documents on the server. Inspect CRUDResult for write errors and docs affected/matched
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Save(NFX.Serialization.BSON.BSONDocument)">
            <summary>
            Updates or inserts 1 document on the server. Inspect CRUDResult for write errors and docs affected/matched
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.DeleteOne(NFX.DataAccess.MongoDB.Connector.Query)">
            <summary>
            Deletes 1 document from the server. Inspect CRUDResult for write errors and docs affected/matched
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Delete(NFX.DataAccess.MongoDB.Connector.DeleteEntry[])">
            <summary>
            Deletes documents from the server. Inspect CRUDResult for write errors and docs affected/matched
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Drop">
            <summary>
            Drops the collection from the server with all of its data and disposes the Collection object
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Collection.Count(NFX.DataAccess.MongoDB.Connector.Query,System.Int32,System.Int32,System.Object)">
            <summary>
            Performs server-side count over cursor
            </summary>
            <param name="query">Optional. A query that selects which documents to count in a collection</param>
            <param name="limit">Optional. The maximum number of matching documents to return</param>
            <param name="skip">Optional. The number of matching documents to skip before returning results</param>
            <param name="hint">Optional. The index to use. Specify either the index name as a string or the index specification document.</param>
            <returns>Count </returns>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Collection.FullName">
            <summary>
            Returns full name of this collection: database.collection
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Connection">
            <summary>
            Represent a connection to MongoDB server. Normally developers should not work with this class directly
            as connections are managed by the Client. 
            This class is not thread safe and must be Acquired first before sending data
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Connection.TryAcquire">
            <summary>
            Returns true when the instance was able to get acquired by the calling thread for the exclusive use
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Connection.Release(System.Boolean)">
            <summary>
            Releases the connection that has been acquired before
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Connection.ExpirationStartUTC">
            <summary>
            Returns when the connection started to expire for its inactivity or null
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Cursor">
            <summary>
            Represents a UNIDIRECTIONAL SINGLE-pass (no buffering) cursor returned by the Find(query) command.
            The cursor needs to be closed by calling Dispose() if the eof has not been reached OR
            it will auto-close on EOF. The cursor may be enumerated only once. It is NOT thread-safe
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Cursor.ID">
            <summary>
            Server-supplied cursor ID
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Cursor.Collection">
            <summary>
            Collection that cursor is open against
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Cursor.Query">
            <summary>
            Query that was sent to the server and resulted in this cursor
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Cursor.Selector">
            <summary>
            Optional selector that was issued with Query or NULL
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Cursor.EOF">
            <summary>
            True if EOF has been reached
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Cursor.FetchBy">
            <summary>
            Gets/sets the size of GET_MORE fetch
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Update">
            <summary>
            Represents an update document sent to MongoDB
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Update.#ctor(System.String,System.Boolean,NFX.Serialization.BSON.TemplateArg[])">
            <summary>
            Creates an instance of the update from JSON template with parameters populated from args optionally caching the template internal
            representation. Do not cache templates that change often
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.UpdateEntry">
            <summary>
            Pairs necessary information for updates: query, update documents along with upsert and multi flags
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.DeleteLimit">
            <summary>
            Denotes limits for deletion: None=Everything or One
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.DeleteLimit.None">
            <summary>
            Everything that matches will be deleted
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.DeleteLimit.OnlyFirstMatch">
            <summary>
            Only the first matching document will be deleted
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.DeleteEntry">
            <summary>
            Pairs necessary information for deletes: query + limit flag
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.CRUDResult">
            <summary>
            Returned by CRUD operations from the server, contains information about total docs affected and write errors.
            The caller needs to inspect the TotalDocumentsAffected and WriteErrors to handle error conditions
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDResult.TotalDocumentsAffected">
            <summary>
            This field contains the aggregated number of documents successfully matched (n) by the entire write command. 
            This includes the number of documents inserted, upserted, updated, and deleted. We do not report on the 
            individual number of documents affected by each batch item. If the application would wish so, then the 
            application should issue one-item batches.
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDResult.TotalDocumentsUpdatedAffected">
            <summary>
            Optional field, with a positive numeric type or zero. 
            Zero is the default value. This field is only and always present for batch updates. 
            nModified is the physical number of documents affected by an update, while TotalDocumentsMatched is the logical number of documents matched by 
            the update's query.
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDResult.WriteErrors">
            <summary>
            NULL or For every batch write that had an error, there is one entry in the array describing the error
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDResult.Upserted">
            <summary>
            NULL or for every batch document that was upserted
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.CRUDWriteError">
            <summary>
            Provides information about document write error
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDWriteError.Index">
            <summary>
            WRITE ERROR ONLY, The index of the erroneous batch item relative to request batch order. Batch items indexes start with 0
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDWriteError.Code">
            <summary>
            Mandatory field with integer format. Contains a numeric code corresponding to a certain type of error
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDWriteError.Message">
            <summary>
            Mandatory field, containing a human-readable version of the error.
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDWriteError.Info">
            <summary>
            Optional field, with a BSONObj format. This field contains structured information about an error that can be processed programmatically.
            For example, if a request returns with a shard version error, we may report the proper shard version as a sub-field here.
            For another example, if a write concern timeout occurred, the information previously reported on wtimeout would be reported here. 
            The format of this field depends on the code above
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.CRUDUpsertInfo">
            <summary>
            Provides information about an upserted document
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDUpsertInfo.Index">
            <summary>
            Index of the document in the batch
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.CRUDUpsertInfo.ID">
            <summary>
            _ID value assigned by an upsert
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.ServerNode">
            <summary>
            Manages connections to the same server
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.ServerNode.CloseAllConnections(System.Boolean)">
            <summary>
            Closes all connections. Waits untill all closed if wait==true, otherwise tries to close what it can
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.ServerNode.ManagerVisit">
            <summary>
            Periodically invoked by the client to do management work, like close expired connections
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.ServerNode.Client">
            <summary>
            References client that this node is under
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.ServerNode.NextRequestID">
            <summary>
            Generates request ID unique per server node
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.ServerNode.Databases">
            <summary>
            Returns mounted databases
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.ServerNode.MaxConnections">
            <summary>
            When greater than zero, imposes a limit on the open connection count
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.ServerNode.MaxExistingAcquisitionTimeoutMs">
            <summary>
            Imposes a timeout for system trying to get an existing connection instance per remote address.
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.ServerNode.Item(System.String)">
            <summary>
            Returns an existing database or creates a new one
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Database">
            <summary>
            Represents an instance of MongoDB database
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Database.Ping">
            <summary>
            Executes a NOP command that round-trips from the server
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Database.GetCollectionNames">
            <summary>
            Returns the names of collections in this database
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Database.RunCommand(NFX.Serialization.BSON.BSONDocument)">
            <summary>
            Runs database-level command. Does not perform any error checks beyond network traffic req/resp passing
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Database.Collections">
            <summary>
            Returns mounted collections
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Database.Item(System.String)">
            <summary>
            Returns an existing collection or creates a new one
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.Connector.Database.NextRequestID">
            <summary>
            Generates request ID unique per server node
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.WriteConcern">
            <summary>
            Defines data safety modes http://docs.mongodb.org/manual/core/write-concern/
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.MongoDBConnectorException">
            <summary>
            Thrown by MongoDB data access classes
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBDataAccessException">
            <summary>
            Thrown by MongoDB data access classes
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.MongoDBConnectorProtocolException">
            <summary>
            Thrown by MongoDB data access classes related to protocol
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.MongoDBConnectorServerException">
            <summary>
            Thrown by MongoDB data access classes related to server errors
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.MongoDBQueryException">
            <summary>
            Thrown in case of query compile error
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Protocol">
            <summary>
            This class uses static methods on purpose to avoid allocations
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Protocol.Read_REPLY(System.IO.Stream)">
            <summary>
            Reads OP_REPLY but does not interpret it
            </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.Protocol.ResponseFlags.CursorNotFound">
             <summary>
            Set when getMore is called but the cursor id is not valid at the server. Returned with zero results. 
             </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.Protocol.ResponseFlags.QueryFailure">
             <summary>
            Set when query failed. Results consist of one document containing an “$err” field describing the failure.
             </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.Protocol.ResponseFlags.ShardConfigStale">
             <summary>
            Drivers should ignore this. Only mongos will ever see this set, in which case, it needs to update config from the server. 
             </summary>
        </member>
        <member name="F:NFX.DataAccess.MongoDB.Connector.Protocol.ResponseFlags.AwaitCapable">
            <summary>
            Set when the server supports the AwaitData Query option. If it doesn’t, a client should sleep a little between getMore’s of a Tailable cursor. Mongod version 1.6 supports AwaitData and thus always sets AwaitCapable.
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.Connector.Query">
            <summary>
            Represents a query document sent to MongoDB
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.Connector.Query.#ctor(System.String,System.Boolean,NFX.Serialization.BSON.TemplateArg[])">
            <summary>
            Creates an instance of the query from JSON template with parameters populated from args optionally caching the template internal
            representation. Do not cache templates that change often
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBCRUDQueryHandlerBase">
            <summary>
            A base for ICRUDQueryHandler-derivatives for mongo
            </summary>
        </member>
        <member name="T:NFX.Log.Destinations.MongoDBDestination">
            <summary>
            Implements destination that sends log messages into MongoDB
            </summary>
        </member>
        <member name="M:NFX.Log.Destinations.MongoDBDestination.#ctor">
            <summary>
            Creates a new instance of destination that stores log MongoDB
            </summary>
        </member>
        <member name="M:NFX.Log.Destinations.MongoDBDestination.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of destination that stores log MongoDB
            </summary>
        </member>
        <member name="P:NFX.Log.Destinations.MongoDBDestination.DataStore">
            <summary>
            Refrences an underlying data store
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBLogMessageDataStore">
            <summary>
            Implements a store that sends log messages into MongoDB
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBDataStoreBase">
            <summary>
            Implements MongoDB store base functionality
            Connect string takes form of:
            <code>
             mongodb://[username:password@]hostname[:port][/[database][?options]]
            </code>
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.ExternalParametersForGroups(System.String[])">
            <summary>
            Returns named parameters that can be used to control this component
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.ExternalGetParameter(System.String,System.Object@,System.String[])">
            <summary>
            Gets external parameter value returning true if parameter was found
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.ExternalSetParameter(System.String,System.Object,System.String[])">
            <summary>
            Sets external parameter value returning true if parameter was found and set
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.GetDatabase">
            <summary>
            Gets appropriate database. It does not need to be disposed
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.ExternalParameters">
            <summary>
            Returns named parameters that can be used to control this component
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.ConnectString">
            <summary>
            Get/Sets MongoDB database connection string
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.MongoDBDataStoreBase.DatabaseName">
            <summary>
            Get/Sets MongoDB database name
            </summary>
        </member>
        <member name="M:NFX.DataAccess.MongoDB.MongoDBLogMessageDataStore.SendMessage(NFX.Log.Message)">
            <summary>
            Inserts log message into MongoDB
            </summary>
        </member>
        <member name="P:NFX.DataAccess.MongoDB.MongoDBLogMessageDataStore.CollectionName">
            <summary>
            Gets/sets collection name used for logging
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBDataStore">
            <summary>
            Implements MongoDB general data store that supports CRUD operations.
            This class IS thread-safe load/save/delete operations
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBCRUDScriptQueryHandler">
            <summary>
            Executes MySql CRUD script-based queries
            </summary>
        </member>
        <member name="T:NFX.DataAccess.MongoDB.MongoDBCRUDQueryExecutionContext">
            <summary>
            Provides query execution environment in MongoDB database context 
            </summary>
        </member>
    </members>
</doc>
