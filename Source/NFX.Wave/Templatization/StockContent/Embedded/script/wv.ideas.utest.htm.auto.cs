//WARNING: This code was auto generated by template compiler, do not modify by hand!
//Generated on 28.01.2016 1:52:38 by NFX.Templatization.TextCSTemplateCompiler at SAMSON

using System; 
using System.Text; 
using System.Linq; 
using System.Collections.Generic; 

namespace id_11779_template_371 
{

 ///<summary>
 /// Auto-generated from template
 ///</summary>
 public  class wv_ideas_utest : NFX.Templatization.Template<object, NFX.Templatization.IRenderingTarget, object>
 {

     protected override void DoRender()
     {
       base.DoRender();
        Target.Write( wv_ideas_utest._27_S_LITERAL_0 );

     }


     #region Literal blocks content
        private const string _27_S_LITERAL_0 = @"<!DOCTYPE html>

<html lang=""en"" >
<head>
    <meta charset=""utf-8"" />
    <title>WV Unit Test</title>
    <script src=""wv.js"" ></script>
    <script src=""ideas.js"" ></script>

    <style>
        body {  padding: 0;  margin: 0; font-family: Tahoma, Verdana; font-size: 10px; }
        pre { font-family: 'Courier New'; font-size: 10px; display: block; border: 1px dotted #e0e0e0; 
              padding: 2px; margin: 2px 2px 2px 2px; background-color: rgba(220,220,220,0.4); white-space: pre-wrap;}
        .wvUTestArea { width: 100%; display: block;  border: 1px solid #004080; background-color: #0094ff; }
        .wvUTestTitle { font-weight: bold; display: block; }
        .wvUTestOK { margin-left: auto;  margin-right: auto; width: 99%; padding: 1px; background-color: #b6ff00; border: 1px dotted #202020; }
        .wvUTestError { margin-left: auto; margin-right: auto; width: 99%; padding: 1px; background-color: #ff8080;  border: 2px solid red; }
        .wvUTestTableError { background-color: #ffa0a0; }
        .wvUTestTableTotal * { font-size: 1.5em; border-top: 2px solid #404040; }
    </style>

</head>
<body>

   <h1>WAVE Root Lib Tests</h1>

    <div id=""div_wv_utest_summary""></div>

    <script>
        var run =  WAVE.UTest.run;
        var log =  WAVE.UTest.log;
        var logi =  WAVE.UTest.logi;
        var assertTrue = WAVE.UTest.assertTrue;
        var assertFalse = WAVE.UTest.assertFalse;
        var marginOfError = .000001;

        // deviation Ok in other words modul of argument difference less than marginOfError
        function devOk(a, b) { return Math.abs(a-b) < marginOfError; }

        run(""Geometry"", ""Segment-toString"", function() {
          var s = new WAVE.Ideas.Geometry.LineSegment(2, 1, 4, 3);
          log(s.toString());
        });

        run(""Geometry"", ""Segment-normilize"", function() {
          var s = new WAVE.Ideas.Geometry.LineSegment(2, 1, 4, 3);
          
          assertTrue(s.nA() == -Math.sin(Math.PI / 4));
          assertTrue(s.nB() == Math.sin(Math.PI / 4));
          assertTrue(s.nC() == Math.sin(Math.PI / 4));
        });

        run(""Geometry"", ""Segment-distance"", function() {
          var s = new WAVE.Ideas.Geometry.LineSegment(0, 0, 2, 0);
          assertTrue(s.distance() == 2);

          s = new WAVE.Ideas.Geometry.LineSegment(17, -3, 17, 1);
          assertTrue(s.distance() == 4);

          s = new WAVE.Ideas.Geometry.LineSegment(2, 1, 4, 3);
          assertTrue(devOk(s.distance(), (1 / Math.cos(Math.PI / 4)) * 2));
        });

        run(""Geometry"", ""Segment-theta"", function() {
          var s = new WAVE.Ideas.Geometry.LineSegment(0, 0, 2, 0);
          assertTrue(s.theta() == 0);

          s = new WAVE.Ideas.Geometry.LineSegment(0, 0, 0, 2);
          assertTrue(s.theta() == Math.PI / 2);

          s = new WAVE.Ideas.Geometry.LineSegment(0, 0, 1, 1);
          assertTrue(s.theta() == Math.PI / 4);

          s = new WAVE.Ideas.Geometry.LineSegment(0, 0, -1, 1);
          assertTrue(s.theta() == 3 * Math.PI / 4);

          s = new WAVE.Ideas.Geometry.LineSegment(0, 0, 1, -1);
          assertTrue(devOk(s.theta(), Math.PI + 3 * Math.PI / 4));
        });

        run(""Geometry"", ""Segment-parallelWith-onSameLineAs-reflexivity"", function() {
          var x1 = 0, y1 = 0, x2 = 4, y2 = 4;
          var s = new WAVE.Ideas.Geometry.LineSegment(x1, y1, x2, y2);

          assertTrue(s.parallelWith(s));
          assertTrue(s.onSameLineAs(s));
        });

        run(""Geometry"", ""Segment-parallelWith-transitivity"", function() {
          var s1 = new WAVE.Ideas.Geometry.LineSegment(2, 1, 4, 3);
          var s2 = new WAVE.Ideas.Geometry.LineSegment(3, 2, 5, 4);
          
          assertTrue(s1.parallelWith(s2));
          assertTrue(s2.parallelWith(s1));
        });

        run(""Geometry"", ""Segment-parallelWith-reverse-direction"", function() {
          var s1 = new WAVE.Ideas.Geometry.LineSegment(0, 0, 1, 1);
          var s2 = new WAVE.Ideas.Geometry.LineSegment(0, 0, -1, -1);

          assertTrue(s1.parallelWith(s2));
          assertTrue(s2.parallelWith(s1));
        });

        run(""Geometry"", ""Segment-onSameLineAs-transitivity"", function() {
          var s1 = new WAVE.Ideas.Geometry.LineSegment(2, 1, 4, 3);
          var s2 = new WAVE.Ideas.Geometry.LineSegment(3, 2, 5, 4);
          
          assertTrue(s1.onSameLineAs(s2));
          assertTrue(s2.onSameLineAs(s1));
        });

        run(""Geometry"", ""Segment-onSameLineAndCollinearWith"", function() {
          var s1 = new WAVE.Ideas.Geometry.LineSegment(0, 0, 1, 1);
          var s2 = new WAVE.Ideas.Geometry.LineSegment(0, 0, -1, -1);
          
          assertFalse(s1.onSameLineAndCollinearWith(s2));

          s1 = new WAVE.Ideas.Geometry.LineSegment(0, 0, 1, 1);
          s2 = new WAVE.Ideas.Geometry.LineSegment(2, 2, 10, 10);
          
          assertTrue(s1.onSameLineAndCollinearWith(s2));
        });

        run(""Geometry"", ""Segment-parallelWith-!onSameLineAs-transtivity"", function() {
          var s1 = new WAVE.Ideas.Geometry.LineSegment(2, 1, 4, 3);
          var s2 = new WAVE.Ideas.Geometry.LineSegment(3, 1, 5, 3);
          
          assertTrue(s1.parallelWith(s2)); 
          assertTrue(s2.parallelWith(s1));
          assertFalse(s1.onSameLineAs(s2)); 
          assertFalse(s2.onSameLineAs(s1));
        });




       run(""Matrix"", ""base"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix();
          var p = m.convert(new WAVE.Geometry.Point(2, -17));
          assertTrue(2 == p.x());
          assertTrue(-17 == p.y());
       });

       run(""Matrix"", ""translate"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix();
          m.translate(-10, 25);
          var p = m.convert(new WAVE.Geometry.Point(10, -35));
          assertTrue(0 == p.x());
          assertTrue(-10 == p.y());
       });

       run(""Matrix"", ""translate-and-back"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix();
          m.translate(-10, 25);
          m.translate(10, -25);
          var p = m.convert(new WAVE.Geometry.Point(10, -35));
          assertTrue(10 == p.x());
          assertTrue(-35 == p.y());
       });

       run(""Matrix"", ""rotate"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix();
          m.rotate(Math.PI / 2);
          var p = m.convert(new WAVE.Geometry.Point(0, 1));
          assertTrue(devOk(-1, p.x()));
          assertTrue(devOk(0, p.y()));
       });

       run(""Matrix"", ""rotate-and-back"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix();
          m.rotate(Math.PI / 2);
          m.rotate(-Math.PI / 2);
          var p = m.convert(new WAVE.Geometry.Point(-22, 13.7));
          assertTrue(devOk(-22, p.x()));
          assertTrue(devOk(13.7, p.y()));
       });

       run(""Matrix"", ""rotation-relative-to-offset"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix();

          // trsnaformations should be done in reverse order, 
          // so logically we move center of coordinates to (3, 2) then rotate -PI radians then return coordinates to (0,0) by adding (3,2) vector
          // but actually we wrote these transformations down down in reverse order
          m.translate(3, 2);
          m.rotate(-Math.PI/2);
          m.translate(-3, -2);

          var p = m.convert(new WAVE.Geometry.Point(4, 3));
          assertTrue(devOk(4, p.x()));
          assertTrue(devOk(1, p.y()));
       });

       run(""Matrix"", ""rotation-relative-to-offset-and-back"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix()
            .translate(3, 2).rotate(-Math.PI/2).translate(-3, -2)
            .translate(3, 2).rotate(Math.PI/2).translate(-3, -2);

          var p = m.convert(new WAVE.Geometry.Point(4, 3));
          assertTrue(devOk(4, p.x()));
          assertTrue(devOk(3, p.y()));
       });

       run(""Matrix"", ""relativeRotate"", function() {
          var m = new WAVE.Ideas.Geometry.Matrix().relativeRotate(-Math.PI/2, 3, 2);

          var p = m.convert(new WAVE.Geometry.Point(4, 3));
          assertTrue(devOk(4, p.x()));
          assertTrue(devOk(1, p.y()));
       });



    </script>
</body>
</html>"; 
     #endregion

 }//class
}//namespace
